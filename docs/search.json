[
  {
    "objectID": "Homework4.html",
    "href": "Homework4.html",
    "title": "ST558 Homework 4",
    "section": "",
    "text": "1. What is the purpose of the lapply() function? What is the equivalent purrr function?\n\nThe lapply() function allows you to apply a function across all elements of a list.\nThe equivalent purrr function is map().\n\n2. Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). we want to use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of hte list. Write code to do this below! (I.e., how do you specify method = “kendall” when calling lapply?)\n\nlapply(X = my_list, FUN = cor, method = “kendall”)\n\n3. What are two advantages of using purrr functions instead of the BaseR apply family?\n\nPurrr functions allow for consistent syntax across the family of functions. By contrast, the base R apply family has idiosyncratic coding differences from one function to the next, which is more difficult to use and track.\nPurrr functions have additional short-hand functionality, such as being able to specify the type of output (e.g., character or double). Although this can also be done with the apply family, it requires additional steps.\n\n4. What is a side-effect function?\n\nA side-effect function uses the input data to generate some sort of output (e.g., printing or plotting something), but does not directly transform or modify the data. Because of this, once the desired output is generated, the data set it was derived from is no longer accessible for additional operations within the same pipe (i.e., the data would need to be called again). This can be overridden, however, through use of walk() instead of map(), or by adding invisible() at the end of the side-effect function.\n\n5. Why can you name a variable sd in a function and not cause any issues with the sd function?\n\nThis is because the variables specified within the function operate within a temporary function environment. This means they are available for use within the function but do not overwrite objects of the same name within the global environment (or other packages). Once the function is executed, the temporary function environment is gone and only the original global objects remain."
  },
  {
    "objectID": "Homework4.html#task-1-conceptual-questions",
    "href": "Homework4.html#task-1-conceptual-questions",
    "title": "ST558 Homework 4",
    "section": "",
    "text": "1. What is the purpose of the lapply() function? What is the equivalent purrr function?\n\nThe lapply() function allows you to apply a function across all elements of a list.\nThe equivalent purrr function is map().\n\n2. Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). we want to use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of hte list. Write code to do this below! (I.e., how do you specify method = “kendall” when calling lapply?)\n\nlapply(X = my_list, FUN = cor, method = “kendall”)\n\n3. What are two advantages of using purrr functions instead of the BaseR apply family?\n\nPurrr functions allow for consistent syntax across the family of functions. By contrast, the base R apply family has idiosyncratic coding differences from one function to the next, which is more difficult to use and track.\nPurrr functions have additional short-hand functionality, such as being able to specify the type of output (e.g., character or double). Although this can also be done with the apply family, it requires additional steps.\n\n4. What is a side-effect function?\n\nA side-effect function uses the input data to generate some sort of output (e.g., printing or plotting something), but does not directly transform or modify the data. Because of this, once the desired output is generated, the data set it was derived from is no longer accessible for additional operations within the same pipe (i.e., the data would need to be called again). This can be overridden, however, through use of walk() instead of map(), or by adding invisible() at the end of the side-effect function.\n\n5. Why can you name a variable sd in a function and not cause any issues with the sd function?\n\nThis is because the variables specified within the function operate within a temporary function environment. This means they are available for use within the function but do not overwrite objects of the same name within the global environment (or other packages). Once the function is executed, the temporary function environment is gone and only the original global objects remain."
  },
  {
    "objectID": "Homework4.html#task-2-writing-r-functions",
    "href": "Homework4.html#task-2-writing-r-functions",
    "title": "ST558 Homework 4",
    "section": "Task 2: Writing R Functions",
    "text": "Task 2: Writing R Functions\n\nStep 1.\nFirst, we will write a basic function (call it getRMSE()) that takes in a vector of responses and a vector of predictions and outputs the RMSE, based on the formula below.\nRMSE = \\(\\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (y_{i} - \\hat y_{i})^2}\\)\nFirst we load the purrr package.\n\nlibrary(purrr)\n\nThe function below requires the two vectors as inputs, and allows for additional arguments, which can be used to specify na.rm = TRUE to allow the calculations to proceed despite missing responses. The function uses map2_vec with an anonymous function that will compute the squared difference between the response value (x) and the predicted value (y) across all observations. This is temporarily stored as sqdiff. Then, this output is passed to the mean function, which also allows for an additional argument specfied when calling the function to be passed through. The square root of the mean is then taken, and the result is returned as RMSE.\n\ngetRMSE &lt;- function(response_vec, predict_vec, ...) {\n  sqdiff &lt;- map2_vec(response_vec, predict_vec, \\(x, y) (x-y)^2)\n  RMSE &lt;- sqrt(mean(sqdiff, ...))\n  RMSE\n}\n\n\n\nStep 2.\nBelow, we run code to generate a vector of responses (resp) and a vector of predictions (pred). We then test the function above using these values.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nWe then test our getRMSE function using these vectors.\n\ngetRMSE(resp, pred)\n\n[1] 0.9581677\n\n\nWe can then test out how the function handles missing values by first replacing a couple of the response values with NA values.\n\nresp &lt;- replace(resp, c(35, 60), NA_real_)\nresp\n\n  [1]  7.674144  5.733128  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925        NA\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494        NA  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177  3.387353\n\n\nCalling the function without the additional argument na.rm = TRUE just returns a value of NA.\n\ngetRMSE(resp, pred)\n\n[1] NA\n\n\nAdding the additional argument na.rm = TRUE returns a numerical value.\n\ngetRMSE(resp, pred, na.rm = TRUE)\n\n[1] 0.9611377\n\n\n\n\nStep 3.\nNext, we create a function to calculate mean absolute deviation, given by the following formula:\nMAE = \\(\\frac{1}{n} \\sum_{i=1}^{n} |y_{i} - \\hat y_{i}|\\)\nAs before, the function requires the two vectors as inputs, and allows for additional arguments, which can be used to specify na.rm = TRUE.\n\ngetMAE &lt;- function(response_vec, predict_vec, ...) {\n  absdiff &lt;- map2_vec(response_vec, predict_vec, \\(x, y) abs(x-y))\n  MAE &lt;- mean(absdiff, ...)\n  MAE\n}\n\n\n\nStep 4.\nAs before, we can generate data for testing.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nWe can then test our getMAE function using these vectors.\n\ngetMAE(resp, pred)\n\n[1] 0.8155776\n\n\nThen we again substitute missing values for two of the responses, and test our function with and without the additional argument na.rm = TRUE.\n\nresp &lt;- replace(resp, c(35, 60), NA_real_)\n\ngetMAE(resp, pred)\n\n[1] NA\n\ngetMAE(resp, pred, na.rm = TRUE)\n\n[1] 0.8173277\n\n\n\n\nStep 5.\nAfter testing both functions, we can now include them in a wrapper function that will call both “helper” functions and return the values. We will create the function to first perform a check to ensure that both vectors are numeric, and will then compute RMSE and/or MAE metrics depending on the arguments passed. Both RMSE and MAE will be returned by default, but these can be turned off by specifying RMSE = FALSE or MAE = FALSE.\n\nwrapper &lt;- function(response_vec, predict_vec, RMSE = TRUE, MAE = TRUE, ...) {\n  if (!is.numeric(response_vec) | !is.numeric(predict_vec) \n    | !is.vector(response_vec) | !is.vector(predict_vec)) {\n    stop(\"Not a numeric vector. Result cannot be calculated\")\n  }\n  if(RMSE) {\n    RMSE &lt;- getRMSE(response_vec, predict_vec,...)\n  }\n  if(MAE) {\n    MAE &lt;- getMAE(response_vec, predict_vec,...)\n  }\n  return(list(\"RMSE\" = RMSE, \"MAE\" = MAE))\n}\n\n\n\nStep 6.\nNext, we will return to generating our response and prediction vectors to test the wrapper function.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nOur first tests call the function for each metric individually and then combined. Calling RMSE only\n\nwrapper(resp, pred, MAE=FALSE)\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] FALSE\n\n\nCalling MAE only\n\nwrapper(resp, pred, RMSE = FALSE)\n\n$RMSE\n[1] FALSE\n\n$MAE\n[1] 0.8155776\n\n\nCalling both together\n\nwrapper(resp, pred)\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\n\nRepeating the test replacing 2 responses with NA\n\nresp &lt;- replace(resp, c(35, 60), NA_real_)\n\nwrapper(resp, pred)\n\n$RMSE\n[1] NA\n\n$MAE\n[1] NA\n\nwrapper(resp, pred, na.rm = TRUE)\n\n$RMSE\n[1] 0.9611377\n\n$MAE\n[1] 0.8173277\n\n\nFinally, we will create a character vector and a numeric data frame and test if it passes the initial test for a numeric vector\n\nmy_df &lt;- data.frame(pred, resp)\n\nchar_vec &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n\nwrapper(my_df, pred)\n\nError in wrapper(my_df, pred): Not a numeric vector. Result cannot be calculated\n\nwrapper(char_vec, pred)\n\nError in wrapper(char_vec, pred): Not a numeric vector. Result cannot be calculated"
  },
  {
    "objectID": "Homework4.html#task-3-querying-an-api-and-a-tidy-style-function",
    "href": "Homework4.html#task-3-querying-an-api-and-a-tidy-style-function",
    "title": "ST558 Homework 4",
    "section": "Task 3: Querying an API and a Tidy-Style Function",
    "text": "Task 3: Querying an API and a Tidy-Style Function\n\nStep 1.\nFirst, we will query data from newsapi.org on a topic of interest. To do this, we first create an R file (api_key.R) storing the digits of the API key obtained from the website. We then obtain the structure of the URL from the website, and modify this to include the topic of interest (“Nintendo Switch” based on my daughter’s input) and desired dates (past 7 days). We will keep the specifier to sort by popularity. This url is then pasted together with the content of the api_key.R and stored in the object “news_url”. We can then call the data using httr::GET.\n\nlibrary(jsonlite)\nlibrary(httr)\nlibrary(tidyverse)\n\n\nnews_url &lt;- paste0(\"https://newsapi.org/v2/everything?q=Nintendo%20Switch&from=2024-06-18&sortBy=popularity&apiKey=\", readLines('api_key.R'))\n\nnews_return &lt;- httr::GET(news_url)\n\n\n\nStep 2.\nNext, we parse the data using rawToChar combined with fromJSON. We are specifically looking to parse the data from content, so this is specified below. Once we parse the content, we then store the articles element as a tibble, making some minor modifications to more easily access the source name, remove entries with no content, and then selecting/rearranging the desired columns. The final data set will be stored as “articles_tbl”.\n\nparsed_content &lt;- fromJSON(rawToChar(news_return$content))\n\narticles_tbl &lt;- as_tibble(parsed_content$articles) |&gt;\n  mutate(source_name = source$name) |&gt;\n  filter(!is.na(author)) |&gt;\n  select(source_name, author, title, description, url, \n         urlToImage, publishedAt, content)\n\narticles_tbl\n\n# A tibble: 96 × 8\n   source_name     author title description url   urlToImage publishedAt content\n   &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Yahoo Entertai… Crist… Supe… \"The newes… http… &lt;NA&gt;       2024-06-18… \"If yo…\n 2 Yahoo Entertai… Natha… Donk… \"It's been… http… &lt;NA&gt;       2024-06-18… \"If yo…\n 3 Yahoo Entertai… Mat S… The … \"Nintendo … http… &lt;NA&gt;       2024-06-19… \"If yo…\n 4 Yahoo Entertai… Anna … The … \"After a b… http… &lt;NA&gt;       2024-06-20… \"If yo…\n 5 Wired           Megan… 'The… \"Princess … http… https://m… 2024-06-18… \"After…\n 6 Wired           Megan… 'Met… \"\\\"Metroid… http… https://m… 2024-06-18… \"Metro…\n 7 The Verge       Quent… Xbox… \"CDKeys is… http… https://c… 2024-06-19… \"Xbox …\n 8 ReadWrite       Owen … Donk… \"In a line… http… https://r… 2024-06-18… \"In a …\n 9 ReadWrite       Owen … Nint… \"The fact … http… https://r… 2024-06-18… \"The f…\n10 ReadWrite       Paul … Metr… \"Nintendo … http… https://r… 2024-06-18… \"Ninte…\n# ℹ 86 more rows\n\n\n\n\nStep 3.\nFinally, we create a function that will allow users to easily query this API for any topic to yield a tibble with the desired information. This function takes in 3 arguments: 1) topic can include a word or phrase and must be entered in quotes; 2) the number of days to be searched prior to today; and 3) the name of the .R file storing the api key, which also should be entered in quotes.\nThe function will then remove spaces from the search terms, convert the number of days to a starting date, and reference the api file to pull the character string for the api key. This information is then pasted together with the rest of the required url and temporarily stored as “news_url”. From there, the function will follow the steps outlined above to get the data using the url, parse this to access the content, and store the contained articles as a tibble with slight modifications for ease of use.\n\nlibrary(lubridate)\n\nget_news &lt;- function(topic, days, api) {\n  #Calculate start date and remove \"UTC\"\n  date &lt;- today() - ddays(days) \n  date &lt;- sub(\" UTC\", \"\", date)\n  #Swap out %20 for any spaces in search terms\n  topic_nospace &lt;- sub(\" \", \"%20\", topic)\n  #Get api_key from stored file\n  api_key &lt;- readLines(api)\n  #build url\n  news_url &lt;- paste0(\"https://newsapi.org/v2/everything?q=\", topic_nospace,\n                     \"&from=\", date, \"&sortBy=popularity&apiKey=\", api_key)\n  #get content\n  news_return &lt;- httr::GET(news_url)\n  #parse content\n  parsed_content &lt;- fromJSON(rawToChar(news_return$content))\n  #modify and store as tibble\n  articles_tbl &lt;- as_tibble(parsed_content$articles) |&gt;\n    mutate(source_name = source$name) |&gt;\n    filter(!is.na(author)) |&gt;\n    select(source_name, author, title, description, url, \n         urlToImage, publishedAt, content)\n}\n\nHere, we test the function by searching for articles on “olympic fencing” in the past 21 days and “presidential debate” in the last 5 days.\n\narticles_tbl &lt;- get_news(\"olympic fencing\", 21, \"api_key.R\")\narticles_tbl\n\n# A tibble: 26 × 8\n   source_name     author title description url   urlToImage publishedAt content\n   &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 HYPEBEAST       info@… Phar… Pharrell W… http… https://i… 2024-06-11… \"Pharr…\n 2 Brit + Co       Jasmi… All … I may not … http… https://w… 2024-06-06… \"I may…\n 3 Dazed           Dazed… Read… Out now, t… http… https://i… 2024-06-11… \"With …\n 4 The Seattle Ti… THOMA… Vogu… On Interna… http… https://i… 2024-06-23… \"PARIS…\n 5 The Seattle Ti… JEROM… Doze… Curious on… http… https://i… 2024-06-17… \"PARIS…\n 6 International … AFP N… Vogu… Paris play… http… https://d… 2024-06-24… \"Paris…\n 7 Minneapolis St… The A… Pari… Athletes t… http… https://w… 2024-06-05… \"A roa…\n 8 Minneapolis St… JEROM… Doze… Curious on… http… https://w… 2024-06-17… \"PARIS…\n 9 Newsweek        Dan G… Watc… A post-mat… http… https://d… 2024-06-18… \"A Ukr…\n10 Time            Chad … Your… Here’s whe… http… https://a… 2024-06-13… \"The S…\n# ℹ 16 more rows\n\narticles_tbl &lt;- get_news(\"presidential debate\", 5, \"api_key.R\")\narticles_tbl\n\n# A tibble: 89 × 8\n   source_name     author title description url   urlToImage publishedAt content\n   &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Wired           Maken… Unwe… \"TikTok cr… http… https://m… 2024-06-24… \"Rober…\n 2 NPR             Steve… Bide… \"NPR's Ste… http… https://m… 2024-06-24… \"NPR's…\n 3 Business Insid… Grace… Trum… \"Trump say… http… https://i… 2024-06-24… \"Donal…\n 4 Business Insid… Jacob… Hush… \"Manhattan… http… https://i… 2024-06-21… \"Donal…\n 5 ReadWrite       Sophi… Kasp… \"To bolste… http… https://r… 2024-06-21… \"To bo…\n 6 ReadWrite       Radek… Wink… \"Gemini CE… http… https://r… 2024-06-21… \"Gemin…\n 7 Time            Rebec… Trum… \"Donald Tr… http… https://a… 2024-06-23… \"Forme…\n 8 Slate Magazine  Ivy B… Ever… \"But will … http… https://c… 2024-06-22… \"This …\n 9 ABC News        Tal A… Bide… \"Thursday'… http… https://i… 2024-06-24… \"Even …\n10 ABC News        Alexa… Bide… \"How will … http… https://i… 2024-06-24… \"Presi…\n# ℹ 79 more rows"
  }
]